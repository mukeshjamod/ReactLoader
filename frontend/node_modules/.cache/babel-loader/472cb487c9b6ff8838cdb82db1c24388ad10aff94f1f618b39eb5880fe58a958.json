{"ast":null,"code":"import React from 'react';\nimport { useLoaderData, json, defer } from 'react-router-dom';\n//import  {useState, useEffect} from 'react';\nimport EventsList from '../components/EventsList';\nconst EventsPage = () => {\n\n  // const events=useLoaderData();\n  //const data = useLoaderData();\n\n  //  if(data.isError){\n  //   return <p>{data.message}</p>\n  //  }\n  // const events = data.events;\n  // return (\n  //   <>\n  //   <EventsList events={events}/>\n  //   </>\n  // )\n};\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    //return {isError:true,message:'Could not fetch'};\n    //  throw new Response(JSON.stringify( {message: 'could not fetch event'}),({\n\n    //    status: 500,\n    //  })\n    //)\n\n    return json({\n      Message: 'could not fetch event'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n    // const resData = await response.json();\n    // return resData.events;\n  }\n}\n\nexport function loader() {\n  return defer({\n    events: loadEvents()\n  });\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["React","useLoaderData","json","defer","EventsList","EventsPage","_c","loadEvents","response","fetch","ok","Message","status","loader","events","$RefreshReg$"],"sources":["/home/mukesh/Intership/redux/Event loader/event-loader/frontend/src/page/Events.js"],"sourcesContent":["\nimport React from 'react';\nimport { useLoaderData,json,defer } from 'react-router-dom';\n//import  {useState, useEffect} from 'react';\nimport EventsList from '../components/EventsList';\n\nconst EventsPage = () => {\n\n  // const events=useLoaderData();\n   //const data = useLoaderData();\n\n  //  if(data.isError){\n  //   return <p>{data.message}</p>\n  //  }\n  // const events = data.events;\n  // return (\n  //   <>\n  //   <EventsList events={events}/>\n  //   </>\n  // )\n}\n\nexport default EventsPage;\n\nasync function loadEvents(){\n  const response = await fetch('http://localhost:8080/events');\n\n  if(!response.ok){\n    //return {isError:true,message:'Could not fetch'};\n      //  throw new Response(JSON.stringify( {message: 'could not fetch event'}),({\n\n      //    status: 500,\n      //  })\n       //)\n  \n    return json(\n      {Message: 'could not fetch event'},\n      {status: 500 ,}\n    )\n}\n  else{\n    return response;\n    // const resData = await response.json();\n    // return resData.events;\n  }\n}\n\n\nexport  function loader(){\n  return  defer({\n          events: loadEvents()\n        })\n}"],"mappings":"AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAACC,IAAI,EAACC,KAAK,QAAQ,kBAAkB;AAC3D;AACA,OAAOC,UAAU,MAAM,0BAA0B;AAEjD,MAAMC,UAAU,GAAGA,CAAA,KAAM;;EAEvB;EACC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAAA,CACD;AAAAC,EAAA,GAdKD,UAAU;AAgBhB,eAAeA,UAAU;AAEzB,eAAeE,UAAUA,CAAA,EAAE;EACzB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAG,CAACD,QAAQ,CAACE,EAAE,EAAC;IACd;IACE;;IAEA;IACA;IACC;;IAEH,OAAOR,IAAI,CACT;MAACS,OAAO,EAAE;IAAuB,CAAC,EAClC;MAACC,MAAM,EAAE;IAAK,CAAC,CAChB;EACL,CAAC,MACK;IACF,OAAOJ,QAAQ;IACf;IACA;EACF;AACF;;AAGA,OAAQ,SAASK,MAAMA,CAAA,EAAE;EACvB,OAAQV,KAAK,CAAC;IACNW,MAAM,EAAEP,UAAU;EACpB,CAAC,CAAC;AACV;AAAC,IAAAD,EAAA;AAAAS,YAAA,CAAAT,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}