{"ast":null,"code":"var _jsxFileName = \"/home/mukesh/Intership/redux/Event loader/event-loader/frontend/src/page/Events.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useLoaderData, json } from 'react-router-dom';\n//import  {useState, useEffect} from 'react';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst EventsPage = () => {\n  _s();\n  // const events=useLoaderData();\n  const data = useLoaderData();\n\n  //  if(data.isError){\n  //   return <p>{data.message}</p>\n  //  }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(EventsList, {\n      events: events\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nasync function loadEvents() {}\nexport async function loader() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    //return {isError:true,message:'Could not fetch'};\n    //  throw new Response(JSON.stringify( {message: 'could not fetch event'}),({\n\n    //    status: 500,\n    //  })\n    //)\n\n    return json({\n      Message: 'could not fetch event'\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n    // const resData = await response.json();\n    // return resData.events;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["React","useLoaderData","json","EventsList","jsxDEV","_jsxDEV","Fragment","_Fragment","EventsPage","_s","data","events","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","loadEvents","loader","response","fetch","ok","Message","status","$RefreshReg$"],"sources":["/home/mukesh/Intership/redux/Event loader/event-loader/frontend/src/page/Events.js"],"sourcesContent":["\nimport React from 'react';\nimport { useLoaderData,json } from 'react-router-dom';\n//import  {useState, useEffect} from 'react';\nimport EventsList from '../components/EventsList';\n\nconst EventsPage = () => {\n\n  // const events=useLoaderData();\n   const data = useLoaderData();\n\n  //  if(data.isError){\n  //   return <p>{data.message}</p>\n  //  }\n   const events = data.events;\n  return (\n    <>\n    <EventsList events={events}/>\n    </>\n  )\n}\n\nexport default EventsPage;\n\nasync function loadEvents(){\n  \n}\n\nexport async function loader(){\n  const response = await fetch('http://localhost:8080/events')\n\n  if(!response.ok){\n    //return {isError:true,message:'Could not fetch'};\n      //  throw new Response(JSON.stringify( {message: 'could not fetch event'}),({\n\n      //    status: 500,\n      //  })\n       //)\n  \n    return json(\n      {Message: 'could not fetch event'},\n      {status: 500 ,}\n    )\n}\n  else{\n    return response;\n    // const resData = await response.json();\n    // return resData.events;\n  }\n}"],"mappings":";;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAACC,IAAI,QAAQ,kBAAkB;AACrD;AACA,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAElD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEvB;EACC,MAAMC,IAAI,GAAGT,aAAa,EAAE;;EAE7B;EACA;EACA;EACC,MAAMU,MAAM,GAAGD,IAAI,CAACC,MAAM;EAC3B,oBACEN,OAAA,CAAAE,SAAA;IAAAK,QAAA,eACAP,OAAA,CAACF,UAAU;MAACQ,MAAM,EAAEA;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAE,iBAC1B;AAEP,CAAC;AAAAP,EAAA,CAdKD,UAAU;EAAA,QAGAP,aAAa;AAAA;AAAAgB,EAAA,GAHvBT,UAAU;AAgBhB,eAAeA,UAAU;AAEzB,eAAeU,UAAUA,CAAA,EAAE,CAE3B;AAEA,OAAO,eAAeC,MAAMA,CAAA,EAAE;EAC5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAG,CAACD,QAAQ,CAACE,EAAE,EAAC;IACd;IACE;;IAEA;IACA;IACC;;IAEH,OAAOpB,IAAI,CACT;MAACqB,OAAO,EAAE;IAAuB,CAAC,EAClC;MAACC,MAAM,EAAE;IAAK,CAAC,CAChB;EACL,CAAC,MACK;IACF,OAAOJ,QAAQ;IACf;IACA;EACF;AACF;AAAC,IAAAH,EAAA;AAAAQ,YAAA,CAAAR,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}