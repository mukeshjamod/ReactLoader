{"ast":null,"code":"var _jsxFileName = \"/home/mukesh/Intership/redux/Event loader/event-loader/frontend/src/App.js\";\n// Challenge / Exercise\n\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport EditEventPage from \"./page/EditEventPage\";\nimport EventDetailPage from \"./page/EventDetailPage\";\nimport EventsPage from \"./page/EventsPage\";\nimport HomePage from \"./page/HomePage\";\nimport NewEventPage from \"./page/NewEventPage\";\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n//Done\n\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  path: '/',\n  element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 24\n  }, this)\n}, {\n  path: '/events',\n  element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 27\n  }, this)\n}, {\n  path: '/events/:eventId',\n  element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 34\n  }, this)\n}, {\n  path: '/events/new',\n  element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 29\n  }, this)\n}, {\n  path: '/events/:eventId/edit',\n  element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 39\n  }, this)\n}]);\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router,\n    children: \" \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["createBrowserRouter","RouterProvider","EditEventPage","EventDetailPage","EventsPage","HomePage","NewEventPage","jsxDEV","_jsxDEV","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","App","children","_c","$RefreshReg$"],"sources":["/home/mukesh/Intership/redux/Event loader/event-loader/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\n\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport EditEventPage from \"./page/EditEventPage\";\nimport EventDetailPage from \"./page/EventDetailPage\";\nimport EventsPage from \"./page/EventsPage\";\nimport HomePage from \"./page/HomePage\";\nimport NewEventPage from \"./page/NewEventPage\";\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n//Done\n\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\n\n\n\n  const router = createBrowserRouter(\n    [{path:'/',element:<HomePage/>},\n  {path:'/events',element:<EventsPage/>},\n{path:'/events/:eventId',element:<EventDetailPage/>},\n{path:'/events/new',element:<NewEventPage/>},\n{path:'/events/:eventId/edit',element:<EditEventPage/>}\n]);\n\nfunction App() {\n  return <RouterProvider router={router}> </RouterProvider>;\n}\n\nexport default App;\n"],"mappings":";AAAA;;AAEA,SAASA,mBAAmB,EAAEC,cAAc,QAAQ,kBAAkB;AACtE,OAAOC,aAAa,MAAM,sBAAsB;AAChD,OAAOC,eAAe,MAAM,wBAAwB;AACpD,OAAOC,UAAU,MAAM,mBAAmB;AAC1C,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,OAAOC,YAAY,MAAM,qBAAqB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAKE,MAAMC,MAAM,GAAGT,mBAAmB,CAChC,CAAC;EAACU,IAAI,EAAC,GAAG;EAACC,OAAO,eAACH,OAAA,CAACH,QAAQ;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AAAE,CAAC,EACjC;EAACL,IAAI,EAAC,SAAS;EAACC,OAAO,eAACH,OAAA,CAACJ,UAAU;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AAAE,CAAC,EACxC;EAACL,IAAI,EAAC,kBAAkB;EAACC,OAAO,eAACH,OAAA,CAACL,eAAe;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AAAE,CAAC,EACpD;EAACL,IAAI,EAAC,aAAa;EAACC,OAAO,eAACH,OAAA,CAACF,YAAY;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AAAE,CAAC,EAC5C;EAACL,IAAI,EAAC,uBAAuB;EAACC,OAAO,eAACH,OAAA,CAACN,aAAa;IAAAU,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA;AAAE,CAAC,CACtD,CAAC;AAEF,SAASC,GAAGA,CAAA,EAAG;EACb,oBAAOR,OAAA,CAACP,cAAc;IAACQ,MAAM,EAAEA,MAAO;IAAAQ,QAAA,EAAC;EAAC;IAAAL,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAiB;AAC3D;AAACG,EAAA,GAFQF,GAAG;AAIZ,eAAeA,GAAG;AAAC,IAAAE,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}